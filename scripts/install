#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# INITIALIZE AND STORE SETTINGS
#=================================================

admin=$(ynh_user_get_info --username=$admin --key=username)
admin_mail=$(ynh_user_get_info --username=$admin --key=mail)

ynh_app_setting_set --key=weather_api_provider --value=$weather_api_provider
ynh_app_setting_set --key=weather_api_key --value=$weather_api_key

key=$(ynh_string_random --length=45 | base64)
redis_db=$(ynh_redis_get_free_db)

ynh_app_setting_set --key=key --value=$key
ynh_app_setting_set --key=redis_db --value=$redis_db



#=================================================
# APP CONFIG FILES
#=================================================
ynh_script_progression "Adding $app's configuration files..."

ynh_config_add --template=".env.production" --destination="$install_dir/.env"

#=================================================
# INSTALL PYTHON DEPENDENCIES
#=================================================
ynh_script_progression "Installing Python dependencies..."

if [ $YNH_ARCH == "armhf" ] || [ $YNH_ARCH == "armel" ]
then
# Install rustup if not already installed
# We need this to be able to install cryptgraphy on ARM hardware
export PATH="$PATH:$install_dir/.cargo/bin:$install_dir/.local/bin:/usr/local/sbin"
    if [ -e $install_dir/.rustup ]; then
    ynh_exec_as_app PATH=$PATH rustup update
    else
    ynh_exec_as_app bash -c 'curl -sSf -L https://static.rust-lang.org/rustup.sh | sh -s -- -y --default-toolchain=stable --profile=minimal'
    fi
fi

pushd "$install_dir"
	python3 -m venv "$install_dir/venv"
	source "$install_dir/venv/bin/activate"
    ynh_hide_warnings pip install --upgrade pip wheel toml pyyaml
	ynh_hide_warnings pip install fittrackee=="$(ynh_app_upstream_version)"
    deactivate
    ynh_safe_rm "$install_dir/.cache/pip"
popd

#Logrotate has to be added now, because the app wonâ€™t start if there are no logs files
ynh_config_add_logrotate
touch /var/log/$app/$app.log
touch /var/log/$app/${app}_workers.log
chown -R $app:www-data /var/log/$app/

#=================================================
# INITIALIZE DATABASE
#=================================================
 ynh_script_progression "Initializing database..."

set -a

source $install_dir/.env

ynh_hide_warnings $install_dir/venv/bin/ftcli db upgrade

ynh_hide_warnings $install_dir/venv/bin/ftcli users create $admin --email $admin_mail --password $password --lang $language --role owner

set +a

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Adding system configurations related to $app..."

ynh_config_add_nginx

ynh_config_add_systemd --service="${app}" --template="fittrackee.service"
ynh_config_add_systemd --service="${app}_workers" --template="fittrackee_workers.service"

yunohost service add "${app}" --description="Fittrackee main service" --log="/var/log/$app/$app.log"
yunohost service add "${app}_workers" --description="Fittrackee task queue service" --log="/var/log/$app/${app}_workers.log"

#ynh_hide_warnings has to be set for the Bookworm version of fail2ban, further OS realease have this bug resoled (normally)
ynh_hide_warnings ynh_config_add_fail2ban --logpath="/var/log/nginx/${domain}-access.log" --failregex="<HOST>.* \"POST /api/auth/login HTTP/\d.\d\" 40"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd services..."

ynh_systemctl --service="${app}" --action="start"
ynh_systemctl --service="${app}_workers" --action="start"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
